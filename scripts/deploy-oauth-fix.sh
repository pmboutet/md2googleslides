#!/bin/bash

# üîß OAuth Fix Deployment Script pour md2googleslides
# Script pour appliquer les corrections OAuth et r√©soudre les erreurs de tokens

set -e

echo "====================================================="
echo "üîß OAuth Fix Deployment pour md2googleslides"
echo "====================================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. V√©rifications pr√©liminaires
echo "1Ô∏è‚É£ V√©rifications pr√©liminaires..."
print_info "Checking Docker and Docker Compose..."

if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n'est pas install√©"
    exit 1
fi

print_success "Docker et Docker Compose sont install√©s"

# 2. Pr√©paration de l'environnement
echo -e "\n2Ô∏è‚É£ Pr√©paration de l'environnement..."

# Cr√©er le dossier credentials s'il n'existe pas
if [ ! -d "./credentials" ]; then
    mkdir -p ./credentials
    print_success "Dossier ./credentials cr√©√©"
else
    print_info "Dossier ./credentials existe d√©j√†"
fi

# V√©rifier la pr√©sence du client_id.json
if [ ! -f "./credentials/client_id.json" ]; then
    print_warning "client_id.json non trouv√© dans ./credentials/"
    echo "Veuillez copier votre fichier client_id.json depuis Google Cloud Console:"
    echo "cp ~/Downloads/client_id.json ./credentials/"
    echo -e "\nOu depuis votre configuration existante:"
    echo "cp ~/.md2googleslides/client_id.json ./credentials/"
    read -p "Appuyez sur Entr√©e une fois le fichier copi√©..."
    
    if [ ! -f "./credentials/client_id.json" ]; then
        print_error "client_id.json toujours manquant. Deployment interrompu."
        exit 1
    fi
fi

print_success "client_id.json trouv√©"

# V√©rifier les permissions
chmod -R 755 ./credentials
print_success "Permissions corrig√©es sur ./credentials"

# 3. Sauvegarde des tokens existants
echo -e "\n3Ô∏è‚É£ Sauvegarde des tokens existants..."

if [ -f "./credentials/credentials.json" ]; then
    cp ./credentials/credentials.json ./credentials/credentials.json.backup.$(date +%Y%m%d_%H%M%S)
    print_success "Tokens existants sauvegard√©s"
else
    print_info "Aucun token existant trouv√© (nouveau deployment)"
fi

# 4. Arr√™t des services existants
echo -e "\n4Ô∏è‚É£ Arr√™t des services existants..."

if docker-compose ps | grep -q "md2slides"; then
    print_info "Arr√™t du conteneur existant..."
    docker-compose down md2googleslides || true
    print_success "Service arr√™t√©"
else
    print_info "Aucun service en cours d'ex√©cution"
fi

# 5. Build de la nouvelle image avec les corrections OAuth
echo -e "\n5Ô∏è‚É£ Build de l'image avec corrections OAuth..."

print_info "Building image with OAuth fixes..."
docker-compose build --no-cache md2googleslides

if [ $? -eq 0 ]; then
    print_success "Image construite avec succ√®s"
else
    print_error "√âchec du build"
    exit 1
fi

# 6. D√©marrage du service mis √† jour
echo -e "\n6Ô∏è‚É£ D√©marrage du service mis √† jour..."

print_info "D√©marrage du conteneur..."
docker-compose up -d md2googleslides

if [ $? -eq 0 ]; then
    print_success "Service d√©marr√©"
else
    print_error "√âchec du d√©marrage"
    exit 1
fi

# 7. Attendre que le service soit pr√™t
echo -e "\n7Ô∏è‚É£ V√©rification du d√©marrage..."

print_info "Attente du d√©marrage du service..."
sleep 10

# Test de sant√©
for i in {1..6}; do
    if curl -s -f http://localhost:3000/health > /dev/null; then
        print_success "Service op√©rationnel !"
        break
    else
        print_info "Tentative $i/6... (attente 5s)"
        sleep 5
    fi
    
    if [ $i -eq 6 ]; then
        print_error "Service non accessible apr√®s 30 secondes"
        echo "V√©rification des logs:"
        docker-compose logs --tail=20 md2googleslides
        exit 1
    fi
done

# 8. Test OAuth
echo -e "\n8Ô∏è‚É£ Test du flux OAuth corrig√©..."

print_info "Test de l'endpoint d'autorisation..."
RESPONSE=$(curl -s -X POST http://localhost:3000/convert-text \
    -H "Content-Type: application/json" \
    -d '{"markdown":"# Test OAuth\n\n## Slide 1\nTest apr√®s corrections OAuth","user":"test@example.com","title":"Test OAuth Fix"}')

if echo "$RESPONSE" | grep -q "auth_url"; then
    print_success "Flux OAuth fonctionnel - URL d'autorisation g√©n√©r√©e"
    AUTH_URL=$(echo "$RESPONSE" | grep -o '"auth_url":"[^"]*"' | cut -d'"' -f4)
    echo -e "\n${BLUE}üîó URL d'autorisation OAuth:${NC}"
    echo "$AUTH_URL"
else
    print_error "Probl√®me avec le flux OAuth"
    echo "R√©ponse re√ßue:"
    echo "$RESPONSE"
fi

# 9. Diagnostic des permissions
echo -e "\n9Ô∏è‚É£ Diagnostic des permissions..."

print_info "V√©rification des permissions dans le conteneur..."
docker exec md2slides ls -la /home/md2gslides/.md2googleslides/ || print_warning "Dossier credentials non encore cr√©√© dans le conteneur"

# 10. R√©sum√© et instructions finales
echo -e "\nüéâ D√âPLOIEMENT TERMIN√â"
echo "====================================================="
print_success "Les corrections OAuth ont √©t√© appliqu√©es avec succ√®s !"

echo -e "\nüìã R√âSUM√â DES CORRECTIONS APPLIQU√âES:"
echo "‚úÖ Gestion am√©lior√©e des refresh tokens"
echo "‚úÖ Force le consentement OAuth (prompt: 'consent')"
echo "‚úÖ Validation des tokens avec timestamp" 
echo "‚úÖ Retry automatique en cas d'√©chec de refresh"
echo "‚úÖ Permissions Docker corrig√©es (suppression :ro)"
echo "‚úÖ √âcriture atomique des credentials"

echo -e "\nüìñ √âTAPES POUR TESTER OAUTH:"
echo "1. Visitez l'URL d'autorisation ci-dessus"
echo "2. Autorisez l'application dans Google"
echo "3. Copiez le param√®tre 'code' de l'URL de callback"
echo "4. Testez la conversion:"
echo ""
echo "   curl -X POST http://localhost:3000/convert-text \\"
echo "     -H \"Content-Type: application/json\" \\"
echo "     -d '{\"markdown\":\"# Test Final\n\n## Success!\nOAuth fix applied\",\"user\":\"test@example.com\"}'"

echo -e "\nüîç MONITORING:"
echo "‚Ä¢ Sant√© du service: curl http://localhost:3000/health"
echo "‚Ä¢ Logs en temps r√©el: docker-compose logs -f md2googleslides"
echo "‚Ä¢ API documentation: http://localhost:3000/"

echo -e "\nüõ†Ô∏è D√âPANNAGE SI BESOIN:"
echo "‚Ä¢ Red√©marrer: docker-compose restart md2googleslides"
echo "‚Ä¢ Logs d√©taill√©s: docker-compose logs md2googleslides"
echo "‚Ä¢ Rebuild complet: docker-compose build --no-cache md2googleslides"

print_success "D√©ploiement OAuth fix termin√© ! üöÄ"
